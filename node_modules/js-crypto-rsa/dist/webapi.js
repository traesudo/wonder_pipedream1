"use strict";
/**
 * webapi.js
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decryptRsa = exports.encryptRsa = exports.verifyRsa = exports.signRsa = exports.generateKey = void 0;
/**
 * Generate RSA public/private key pair.
 * @param {Number} modulusLength - Modulus length in bits, i.e., n.
 * @param {Uint8Array} publicExponent - Public exponent, i.e, e.
 * @param {Object} webCrypto - WebCryptoSubtle object, i.e., window.crypto.subtle
 * @return {Promise<{publicKey: JsonWebKey, privateKey: JsonWebKey}>}
 */
var generateKey = function (modulusLength, publicExponent, webCrypto) { return __awaiter(void 0, void 0, void 0, function () {
    var alg, keys, publicKey, privateKey;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                alg = { name: 'RSA-OAEP', modulusLength: modulusLength, publicExponent: publicExponent, hash: { name: 'SHA-256' } };
                return [4 /*yield*/, webCrypto.generateKey(alg, true, ['encrypt', 'decrypt'])];
            case 1:
                keys = _a.sent();
                return [4 /*yield*/, webCrypto.exportKey('jwk', keys.publicKey)];
            case 2:
                publicKey = _a.sent();
                return [4 /*yield*/, webCrypto.exportKey('jwk', keys.privateKey)];
            case 3:
                privateKey = _a.sent();
                // delete optional entries to export as general rsa sign/encrypt key
                delete publicKey.key_ops;
                delete publicKey.alg;
                delete publicKey.ext;
                delete privateKey.key_ops;
                delete privateKey.alg;
                delete privateKey.ext;
                return [2 /*return*/, { publicKey: publicKey, privateKey: privateKey }];
        }
    });
}); };
exports.generateKey = generateKey;
/**
 * RSA signing via RSA-PSS or RSASSA-PKCS1-v1_5 in WebAPI.
 * @param {Uint8Array} msg - Byte array of message to be signed.
 * @param {JsonWebKey} privateJwk - Private key for signing in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'.
 * @param {RSASignAlgorithm} algorithm - Object to specify algorithm parameters.
 * @param {Object} webCrypto - WebCryptoSubtle object
 * @return {Promise<Uint8Array>} - Byte array of raw signature.
 * @throws {Error} - if RSA-PSS in IE.
 */
function signRsa(msg, privateJwk, hash, algorithm, webCrypto) {
    return __awaiter(this, void 0, void 0, function () {
        var algo, key, signature;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    algo = { name: algorithm.name, hash: { name: hash }, saltLength: algorithm.saltLength };
                    return [4 /*yield*/, webCrypto.importKey('jwk', privateJwk, algo, false, ['sign'])];
                case 1:
                    key = _a.sent();
                    return [4 /*yield*/, webCrypto.sign(algo, key, msg)];
                case 2:
                    signature = _a.sent();
                    return [2 /*return*/, new Uint8Array(signature)];
            }
        });
    });
}
exports.signRsa = signRsa;
/**
 * Verification of RSA signature via RSA-PSS or RSASSA-PKCS1-v1_5 in WebAPI.
 * @param {Uint8Array} msg - Byte array of message signed.
 * @param {Uint8Array} signature - Byte array of raw signature.
 * @param {JsonWebKey} publicJwk - public key for signing in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'.
 * @param {RSASignAlgorithm} algorithm - Object to specify algorithm parameters.
 * @param {Object} webCrypto - WebCryptoSubtle object
 * @return {Promise<boolean>} - Result of verification.
 * @throws {Error} - if RSA-PSS in IE.
 */
var verifyRsa = function (msg, signature, publicJwk, hash, algorithm, webCrypto) { return __awaiter(void 0, void 0, void 0, function () {
    var algo, key;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                algo = { name: algorithm.name, hash: { name: hash }, saltLength: algorithm.saltLength };
                return [4 /*yield*/, webCrypto.importKey('jwk', publicJwk, algo, false, ['verify'])];
            case 1:
                key = _a.sent();
                return [2 /*return*/, webCrypto.verify(algo, key, signature, msg)];
        }
    });
}); };
exports.verifyRsa = verifyRsa;
/**
 * RSA Encryption via WebAPI.
 * @param {Uint8Array} msg - Byte array of message to be encrypted
 * @param {JsonWebKey} publicJwk - Public key in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'
 * @param {Uint8Array} label - RSA-OAEP label.
 * @param {Object} webCrypto - WebCryptoSubtle object
 * @return {Promise<Uint8Array>} - Encrypted message.
 * @throws {Error} - if RSA-OAEP label is specified in IE.
 */
var encryptRsa = function (msg, publicJwk, hash, label, webCrypto) { return __awaiter(void 0, void 0, void 0, function () {
    var algo, key, encrypted;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                algo = { name: 'RSA-OAEP', hash: { name: hash }, label: label };
                return [4 /*yield*/, webCrypto.importKey('jwk', publicJwk, algo, false, ['encrypt'])];
            case 1:
                key = _a.sent();
                return [4 /*yield*/, webCrypto.encrypt(algo, key, msg)];
            case 2:
                encrypted = _a.sent();
                return [2 /*return*/, new Uint8Array(encrypted)];
        }
    });
}); };
exports.encryptRsa = encryptRsa;
/**
 * RSA Decryption via WebAPI.
 * @param {Uint8Array} msg - encrypted message byte array.
 * @param {JsonWebKey} privateJwk - Private key in JWK format.
 * @param {String} hash - Name of hash algorithm like 'SHA-256'
 * @param {Uint8Array} label - RSA-OAEP label.
 * @param {Object} webCrypto - WebCryptoSubtle object.
 * @return {Promise<Uint8Array>} - Decrypted message.
 * @throws {Error} - if RSA-OAEP label is specified in IE.
 */
var decryptRsa = function (msg, privateJwk, hash, label, webCrypto) { return __awaiter(void 0, void 0, void 0, function () {
    var algo, key, decrypted;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                algo = { name: 'RSA-OAEP', hash: { name: hash }, label: label };
                return [4 /*yield*/, webCrypto.importKey('jwk', privateJwk, algo, false, ['decrypt'])];
            case 1:
                key = _a.sent();
                return [4 /*yield*/, webCrypto.decrypt(algo, key, msg)];
            case 2:
                decrypted = _a.sent();
                return [2 /*return*/, new Uint8Array(decrypted)];
        }
    });
}); };
exports.decryptRsa = decryptRsa;
//# sourceMappingURL=webapi.js.map