"use strict";
/**
 * pss.js
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkLength = void 0;
var params = __importStar(require("./params"));
// emLen = Math.ceil((modBits(=k) - 1)/8), e.g., Math.ceil(2047/8) = 256, that is exactly equal to k)
/**
 * Check PSS Length.
 * @param {String} mode - 'sign' or 'verify'
 * @param {Number} k - Octet length of modulus length, i.e., n.
 * @param {String} hash - Name of hash function.
 * @param {Number} saltLength - Length of salt.
 * @throws {Error} - Throws if Inconsistent, EncodingError, or InvalidMode.
 */
var checkLength = function (mode, _a) {
    var k = _a.k, hash = _a.hash, saltLength = _a.saltLength;
    if (mode === 'sign') {
        if (k > (1 << params.hashes[hash].maxInput) - 1)
            throw new Error('Inconsistent');
        if (k < params.hashes[hash].hashSize + saltLength + 2 || saltLength < 0)
            throw new Error('EncodingError');
    }
    else if (mode === 'verify') {
        if (k > (1 << params.hashes[hash].maxInput) - 1)
            throw new Error('Inconsistent');
        if (k < params.hashes[hash].hashSize + saltLength + 2 || saltLength < 0)
            throw new Error('Inconsistent');
    }
    else
        throw new Error('InvalidMode');
};
exports.checkLength = checkLength;
//# sourceMappingURL=pss.js.map